{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAround","key","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","gaveUp","rulesOn","isLoading","playAgain","handleRandomMoves","randomMove","showRules","showSoltn","Array","nrows","i","length","ncols","b","console","log","guess","Math","floor","random","guess_2","concat","numOfMoves","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","row","cell","setState","_this2","giveUpBtn","rulesBtn","table","_loop","push","src_Cell_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4d2a26c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAround(this.props.key);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/*    For the board:\n*       .  .  .\n*       O  O  .     (where . is off, and O is on)\n*       .  .  .\n*\n*    This would be: [[f, f, f], [t, t, f], [f, f, f]] */\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n      gaveUp: false,\n      rulesOn: false,\n      isLoading: true\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.playAgain = this.playAgain.bind(this);\n    this.handleRandomMoves = this.handleRandomMoves.bind(this);\n    this.randomMove = this.randomMove.bind(this);\n    this.showRules = this.showRules.bind(this);\n    this.showSoltn = this.showSoltn.bind(this);\n\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    //length of board is now nrows!\n    let board = new Array(this.props.nrows);\n    for (let i = 0 ;i<board.length;i++) {\n      board[i] = new Array(this.props.ncols);\n      for (let b = 0; b<this.props.ncols;b++) {\n        board[i][b] = false;\n      }\n    }\n    console.log(board);\n    return board\n  }\n\n  randomMove() {\n    let guess = Math.floor(Math.random() * this.props.nrows); // value from 0 to 4\n    let guess_2 = Math.floor(Math.random() * this.props.ncols); // value from 0 to 4\n    this.flipCellsAround(`${guess}-${guess_2}`);\n  }\n\n  //when we radnomly doing a move we weill flip cells aroung it, this way the board will stay solvable\n  handleRandomMoves() {\n    const numOfMoves = Math.floor(Math.random() * 5) + 3; // number of moves when game starts\n    for (let i = 0; i < numOfMoves; i++) {\n      this.randomMove();\n    }\n  }\n\n\n  flipCellsAround(coord) {\n    console.log(\"flipping\", coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    //turn of the cell itslef\n    flipCell(y, x);\n    flipCell(y-1,x); //top one\n    flipCell(y+1,x);   //bottom one\n    flipCell(y,x+1);   //right one\n    flipCell(y, x-1);    //left one\n\n    // win when every cell is turned off   \n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board, hasWon: hasWon});\n  }\n\n  playAgain() {\n    this.handleRandomMoves();\n    this.setState({ hasWon: false });\n  }\n\n  giveUp() {\n    this.setState({ gaveUp: true });\n  }\n\n  showRules() {\n    this.state.rulesOn ? this.setState({ rulesOn: 0 }) : this.setState({ rulesOn: 1 })\n  }\n\n  showSoltn() {\n    this.state.gaveUp ? this.setState({ gaveUp: false }) : this.setState({ gaveUp: true })\n  }\n\n  componentDidMount() {\n    this.handleRandomMoves();\n    //this.setState({hasWon: true}); \n    this.setState({isLoading:false})\n  }\n\n  render() {\n\n    if (this.state.isLoading) {\n      return (\n          <div>\n            <h1>Loading...</h1>\n          </div>\n        );      \n\n    }\n\n\n    if (this.state.hasWon){\n      return (\n        <div>\n          <h1 className=\"neon-blue win\">You <span className=\"neon-pink win\">win!</span></h1>\n          <button className=\"Board-btn xenon\" onClick={this.playAgain}>\n            PLAY AGAIN \n          </button>\n        </div>\n      );\n\n    }\n    let table = [];\n    for (let y=0; y< this.props.nrows; y++) {\n      let row = [];\n      for (let x =0; x< this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(<Cell \n                key={coord} \n                coord={coord}\n                isLit={this.state.board[y][x]} \n                flipCellsAround = {() => this.flipCellsAround(coord) }\n                />); \n      }\n      table.push(<tr key={y}>{row}</tr>)\n    }\n    \n    let giveUpBtn;\n    let rulesBtn;\n    this.state.rulesOn ? \n               rulesBtn = \n                 <div className='rulesBtn'>\n                   <button onClick={this.showRules} className='giveUp Board-btn'>hide&nbsp;&nbsp;&nbsp; rules</button>\n                   <p className='Board-rules'>LightsOut is a puzzle where you are given a grid of cells, or lights, with some dark and others light. You must turn them all off by clicking on the cells. Each click toggles that cell and each of its immediate neighbors.\n                  </p>\n                 </div> \n                : rulesBtn = <button onClick={this.showRules} className='giveUp Board-btn'>rules</button>\n    if (!this.state.gaveUp) {\n      giveUpBtn = <button onClick={this.showSoltn} className='giveUp Board-btn'>how &nbsp;&nbsp;&nbsp;to&nbsp;&nbsp;&nbsp; win</button>\n    } else {\n      giveUpBtn = <div className='giveUpbtn'>\n        <button onClick={this.showSoltn} className='giveUp Board-btn'>back &nbsp;&nbsp;to&nbsp;&nbsp; game</button> \n        <p className='Board-rules'>1) The easiest way to solve LightsOut puzzles is to use a method called 'Chase The Lights'. Starting with the second row, click on every cell that has a light on in the row above it. This will turn off all the lights in that row. Continue with each successive row until the only remaining lights are in the final row.<br/><br/>2) Now that you only have lights on in the final row, use the lookup table below and find the pattern of lights. This will tell you which lights to click in the top row. When you chase the lights this time, the bottom row will end up dark, just like the rest of the puzzle.\n        </p>\n        <table className=\"container Board-rules pattern\">\n          <tbody><tr><th>Bottom Row Lights</th><th>Top Row Clicks</th></tr>\n            <tr><td>..***</td><td>...+.</td></tr>\n            <tr><td>.*.*.</td><td>.+..+</td></tr>\n            <tr><td>.**.*</td><td>+....</td></tr>\n            <tr><td>*...*</td><td>...++</td></tr>\n            <tr><td>*.**.</td><td>....+</td></tr>\n            <tr><td>**.**</td><td>..+..</td></tr>\n            <tr><td>***..</td><td>.+...</td></tr>\n          </tbody></table>\n      </div>\n    }\n\n      return (\n        <div className='container'>\n          <div className='Board-title'>\n            <div className=\"neon-blue\">Lights </div>\n            <div className=\"neon-pink\"> Out</div>\n          </div>\n            { !this.state.gaveUp ? (<table className=\"Board\"><tbody>{table}</tbody></table>): null }\n        <div className='container'>\n            {rulesBtn}\n            {giveUpBtn}\n        </div>\n        </div>\n      );\n    \n  }\n  \n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}